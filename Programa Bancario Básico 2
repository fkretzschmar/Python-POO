from datetime import datetime
import pytz

# Definir o fuso horário de São Paulo
SP_TZ = pytz.timezone('America/Sao_Paulo')

class Account:
    def __init__(self, account_number, account_holder, balance=0.0, agency="0001"):
        self.account_number = account_number
        self.account_holder = account_holder
        self.balance = balance
        self.withdrawals_today = 0
        self.transfers_today = 0
        self.last_transaction_date = None
        self.agency = agency  # Padrão para agência: 0001

    def reset_transactions(self):
        today = datetime.now(SP_TZ).date()
        if self.last_transaction_date != today:
            self.withdrawals_today = 0
            self.transfers_today = 0
            self.last_transaction_date = today

    def can_withdraw(self):
        self.reset_transactions()
        if self.withdrawals_today > 2:
            print("Limite de 3 saques diários atingido.")
            return False
        return True

    def can_transfer(self):
        self.reset_transactions()
        if self.transfers_today > 2:
            print("Limite de 3 transferências diárias atingido.")
            return False
        return True

    def register_withdrawal(self):
        self.withdrawals_today += 1
        self.last_transaction_date = datetime.now(SP_TZ).date()
        print(f"Saque registrado em {datetime.now(SP_TZ)}")
        self.display_account_details()

    def register_transfer(self):
        self.transfers_today += 1
        self.last_transaction_date = datetime.now(SP_TZ).date()
        print(f"Transferência registrada em {datetime.now(SP_TZ)}")
        self.display_account_details()

    def display_account_details(self):
        print("===============================================")
        print(f"Agência: {self.agency}")
        print(f"Número: {self.account_number}")
        print(f"Titular: {self.account_holder}")
        print(f"Saldo: R$ {self.balance:.2f}")
        print("===============================================")

accounts = []
account_count = 0
MAX_ACCOUNTS = 100

def create_account():
    global account_count
    if account_count >= MAX_ACCOUNTS:
        print("Limite de contas atingido.")
        return
    
    account_holder = input("Nome do titular da conta: ")
    new_account = Account(account_count + 1, account_holder)
    accounts.append(new_account)
    account_count += 1
    print(f"Conta criada com sucesso! Numero da conta: {new_account.account_number} em {datetime.now(SP_TZ)}")
    new_account.display_account_details()

def deposit():
    account_number = int(input("Numero da conta: "))
    if 1 <= account_number <= account_count:
        account = accounts[account_number - 1]
        amount = float(input("Valor para deposito: "))
        account.balance += amount
        print(f"Deposito realizado com sucesso em {datetime.now(SP_TZ)}!")
    else:
        print("Conta nao encontrada.")

def withdraw():
    account_number = int(input("Numero da conta: "))
    if 1 <= account_number <= account_count:
        account = accounts[account_number - 1]
        if account.can_withdraw():
            amount = float(input("Valor para saque: "))
            if account.balance >= amount:
                account.balance -= amount
                account.register_withdrawal()
            else:
                print("Saldo insuficiente.")
    else:
        print("Conta nao encontrada.")

def check_balance():
    account_number = int(input("Numero da conta: "))
    if 1 <= account_number <= account_count:
        account = accounts[account_number - 1]
        print(f"Saldo da conta {account_number}: R$ {account.balance:.2f}")
        print(f"Consulta realizada em {datetime.now(SP_TZ)}")
    else:
        print("Conta nao encontrada.")

def transfer():
    from_account = int(input("Numero da conta de origem: "))
    to_account = int(input("Numero da conta de destino: "))
    if 1 <= from_account <= account_count and 1 <= to_account <= account_count:
        account_from = accounts[from_account - 1]
        account_to = accounts[to_account - 1]
        if account_from.can_transfer():
            amount = float(input("Valor para transferencia: "))
            if account_from.balance >= amount:
                account_from.balance -= amount
                account_to.balance += amount
                account_from.register_transfer()
            else:
                print("Saldo insuficiente na conta de origem.")
    else:
        print("Uma das contas nao foi encontrada.")

def main():
    while True:
        print("\n--- Sistema Bancario ---")
        print("1. Criar Conta")
        print("2. Depositar")
        print("3. Sacar")
        print("4. Consultar Saldo")
        print("5. Transferir")
        print("6. Sair")
        choice = int(input("Escolha uma opcao: "))
        
        if choice == 1:
            create_account()
        elif choice == 2:
            deposit()
        elif choice == 3:
            withdraw()
        elif choice == 4:
            check_balance()
        elif choice == 5:
            transfer()
        elif choice == 6:
            print("Saindo...")
            break
        else:
            print("Opcao invalida. Tente novamente.")

if __name__ == "__main__":
    main()

